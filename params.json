{"name":"Vim","tagline":"A \"sensible defaults\" configuration for Vim. I'm primarily a PHP developer but these settings assume nothing. Instead, I tried to make a boilerplate setup that works for almost any environment.","body":"# sirlancelot's dot vimrc\r\n\r\nKeeping things minimal yet convenient. Find out how to\r\n[install it](#installation), then learn the [key mappings](#key-mappings). If\r\nyou're on a Mac, get your [terminal settings right](#mac-terminal-settings).\r\nFind out what [plugins](#plugins-used) I used. If you're feeling generous, you\r\ncan even [contribute](#contribute-pull-requests).\r\n\r\n## installation\r\n\r\nInstall on Unix-based machines:\r\n\r\n    $ git clone --recursive https://github.com/sirlancelot/vim ~/.vim\r\n    $ ./extra/install.sh\r\n\r\nYou do not need to link `gvimrc.vim` as it is loaded at the bottom of `vimrc.vim`\r\n\r\nInstall on other platforms: just copy or link `vimrc.vim` to your\r\nhome directory and call it `.vimrc` or `_vimrc` on Windows.\r\n\r\n## key mappings\r\n\r\nLeader Key: `,` *(comma)*\r\n\r\n  - Use `<leader>ev` and `<leader>eg` to edit vimrc and gvimrc respectively.\r\n    They will be automatically reloaded when you save.\r\n  - Hit `<space>` on a fold to toggle open or close. `<s-space>` is recursive.\r\n  - `<tab>` will toggle `'list'` which will visualize tabs and trailing\r\n    whitespace.\r\n  - `<tab>` and `<s-tab>` with a selection will indent and unindent,\r\n    respectively.\r\n  - `<s-T>` in normal mode will strip all trailing whitespace.\r\n\r\n## mac terminal settings\r\n\r\nIf the `<Home>` and `<End>` keys aren't working for you in Console Vim, you need to\r\nadd the following changes to your Terminal Preferences Keyboard Settings:\r\n\r\n  - Key: `Home`, Escape Sequence: `\\033OH`\r\n  - Key: `End`, Escape Sequence: `\\033OF`\r\n\r\nNote: `\\033` is typed by pressing `<Escape>` when the cursor is in the text box.\r\n\r\n## plugins used\r\n\r\nAll plugins are placed in the `bundle/` subfolder and are git submodules. Each\r\nbundle is loaded using [Pathogen][]. Rather than clutter up the `.vim` root\r\nfolder, my personal additions have been placed either in the `*vimrc.vim` or\r\n`personal/`\r\n\r\n  - [Coffee-Script](https://github.com/kchmck/vim-coffee-script)\r\n  - [Ctrl-P](https://github.com/kien/ctrlp.vim)\r\n  - [Fugitive](https://github.com/tpope/vim-fugitive)\r\n  - [Git](https://github.com/tpope/vim-git) *updated runtime for Fugitive*\r\n  - [Indent Guides](https://github.com/nathanaelkane/vim-indent-guides)\r\n  - [Jekyll](https://github.com/csexton/jekyll.vim)\r\n  - [Markdown](https://github.com/tpope/vim-markdown.git)\r\n  - [Solarized](https://github.com/altercation/vim-colors-solarized) \r\n  - [Supertab](https://github.com/ervandew/supertab)\r\n  - [Surround](https://github.com/tpope/vim-surround)\r\n  - [TabMan](https://github.com/kien/tabman.vim)\r\n  - [ZenCoding](https://github.com/mattn/zencoding-vim)\r\n\r\n  [Pathogen]: https://github.com/tpope/vim-pathogen\r\n\r\n## contribute pull requests\r\n\r\nPull Requests will only be merged if they are based off the tip of the\r\n[develop][] branch. Please rebase (don't merge!) your changes if you are behind.\r\nTo learn about why rebase is better than merge, check out [The Case for Git\r\nRebase][rebase].\r\n\r\nIn short, to bring your Working Copy up to the tip of [develop][], you can use the\r\nrebase feature: `git pull --rebase`. See [Pull with Rebase][pull] for details.\r\n\r\n  [develop]: /sirlancelot/vim/tree/develop\r\n  [rebase]: http://darwinweb.net/articles/the-case-for-git-rebase\r\n  [pull]: http://gitready.com/advanced/2009/02/11/pull-with-rebase.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}